      //mov $0x0a41424344454647, %rax
0x13        PTR = base_addr
0x35        UVAL 0x5  [rax_offset == 0x5]
0x0F        PTR = PTR + VAL
0x3A        UVAL 0xa
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x31        UVAL 0x1
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x32        UVAL 0x2
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x33        UVAL 0x3
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x35        UVAL 0x5
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x36        UVAL 0x6
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x37        UVAL 0x7
0x11        *PTR = VAL

      //push %rax
0x02        CLR VAL
0x13        PTR = base_addr
0x35        UVAL  0x5  [rax_offset == 0x5]           30  - instr  [110000] - Update VAL = 0x0                       
0x0F        PTR = PTR + VAL                          20  - instr  [100000] - Update PTR = 0x0
0x12        VAL = *PTR                               1F  - instr  [011111] - SET IP  ||  SRIP = PTR
0x1B        PUSH VAL                                 1E  - instr  [011110] - SYSCALL
0x02        CLR VAL
                                                     1D  - instr  [011101] - VAL = VAL<<4
      //mov $0x1, %rax                               1C  - instr  [011100] - PTR = PTR<<4
0x13        PTR = base_addr                          1B  - instr  [011011] - PUSH VAL
0x35        UVAL  0x5  [rax_offset == 0x5]           1A  - instr  [011010] - POP VAL
0x0F        PTR = PTR + VAL                          19  - instr  [011001] - CMP  ||  VAL = (VAL <= *PTR)? 1 : 0
0x02        CLR VAL                                  18  - instr  [011000] - JMP  ||  SRIP = (VAL==0)? PTR : SRIP+1
0x31        UVAL 0x1                                 13  - instr  [010011] - PTR = BASE_ADDR
0x11        *PTR = VAL                               12  - instr  [010010] - VAL = *PTR
                                                     11  - instr  [010001] - *PTR = VAL
      //mov $0x1, %rdi                               10  - instr  [010000] - SWAP   PTR <-> VAL
0x13        PTR = base_addr                          0F  - instr  [001111] - PTR += VAL
0x3A        UVAL  0xA  [rdi_offset == 0xA]           0E  - instr  [001110] - VAL = 2sCompl(Val)
0x0F        PTR = PTR + VAL                          07  - instr  [000111] - CLR BOTH REPEAT
0x02        CLR VAL                                  06  - instr  [000110] - CLR VAL REPEAT
0x31        UVAL 0x1                                 05  - instr  [000101] - CLR PTR REPEAT
0x11        *PTR = VAL                               04  - instr  [000100] - NOP REPEAT
                                                     03  - instr  [000011] - CLR BOTH
      //mov %rsp, %rsi                               02  - instr  [000010] - CLR VAL
0x13        PTR = base_addr                          01  - instr  [000001] - CLR PTR
0x31        UVAL  0x1  [rsp_offset == 0x1]           00  - instr  [000000] - NOP
0x0F        PTR = PTR + VAL
0x11        VAL = *PTR
0x1B        PUSH VAL
0x13        PTR = base_addr
0x39        UVAL  0x9  [rsi_offset == 0x9]
0x0F        PTR = PTR + VAL
0x1A        POP VAL
0x11        *PTR = VAL
0x02        CLR VAL

      //mov $0x08, %rdx
0x13        PTR = base_addr
0x38        UVAL  0x8  [rdx_offset == 0x8]
0x0F        PTR = PTR + VAL
0x02        CLR VAL
0x38        UVAL 0x8
0x11        *PTR = VAL

      //syscall
0x1E        syscall
