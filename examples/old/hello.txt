      //mov %rsp, %rsi                     
0x1E        PTR = base_addr                
0x31        UVAL  0x1  [rsp_offset == 0x1] 
0x1C        VAL *= REG_SIZE
0x0F        PTR = PTR + VAL
0x19        VAL = *PTR
0x1C        VAL *= REG_SIZE
0x1E        PTR = base_addr                
0x0F        PTR = PTR + VAL
0x17        SWAP 
0x1B        PUSH VAL
0x1E        PTR = base_addr
0x02        CLR VAL
0x38        UVAL  0x8  [rsi_offset == 0x8]
0x1C        VAL *= REG_SIZE
0x0F        PTR = PTR + VAL
0x1A        POP VAL
0x18        *PTR = VAL
0x02        CLR VAL

      //mov $0x0a41424344454647, %rax
0x02        CLR VAL
0x17        SWAP
0x02        CLR VAL
0x1E        PTR = base_addr
0x34        UVAL 0x4  [rax_offset == 0x4]
0x1C        VAL *= REG_SIZE 
0x0F        PTR = PTR + VAL
0x02        CLR VAL
0x3A        UVAL 0x4
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x31        UVAL 0x1
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x32        UVAL 0x2
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x33        UVAL 0x3
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x35        UVAL 0x5
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x36        UVAL 0x6
0x1D        SHVAL << 4 
0x34        UVAL 0x4
0x1D        SHVAL << 4 
0x37        UVAL 0x7
0x18        *PTR = VAL

      //push %rax
0x02        CLR VAL
0x1E        PTR = base_addr
0x34        UVAL  0x4 [rax_offset == 0x4]
0x1C        VAL *= REG_SIZE 
0x0F        PTR = PTR + VAL                
0x19        VAL = *PTR                     
0x1B        PUSH VAL                       
0x1B        PUSH VAL                       
0x02        CLR VAL
                                           
      //mov $0x1, %rax                     
0x1E        PTR = base_addr                
0x34        UVAL  0x4  [rax_offset == 0x4]
0x1C        VAL *= REG_SIZE 
0x0F        PTR = PTR + VAL                
0x02        CLR VAL                        
0x31        UVAL 0x1                       
0x18        *PTR = VAL                     
                                           
      //mov $0x1, %rdi                     
0x1E        PTR = base_addr                
0x39        UVAL  0x9  [rdi_offset == 0x9]
0x1C        VAL *= REG_SIZE 
0x0F        PTR = PTR + VAL                
0x02        CLR VAL                        
0x31        UVAL 0x1                       
0x18        *PTR = VAL                     
                                           
      //mov $0x10, %rdx
0x1E        PTR = base_addr
0x37        UVAL  0x7  [rdx_offset == 0x7]
0x1C        VAL *= REG_SIZE
0x0F        PTR = PTR + VAL
0x02        CLR VAL
0x31        UVAL 0x1
0x1D        SHVAL << 4 
0x18        *PTR = VAL

      //syscall      - sys_write (1, 1, rsp, 0x10)
0x1F        syscall

      //mov $0x3c, %rax
0x02        CLR VAL                        
0x1E        PTR = base_addr                
0x34        UVAL  0x4  [rax_offset == 0x4]
0x1C        VAL *= REG_SIZE
0x0F        PTR = PTR + VAL                
0x02        CLR VAL                        
0x33        UVAL  0x3
0x1D        SHVAL << 4 
0x3C        UVAL  0xC
0x18        *PTR = VAL                     
 
      //mov $0x0, %rdi
0x02        CLR VAL                        
0x1E        PTR = base_addr                
0x39        UVAL  0x9  [rdi_offset == 0x9]
0x1C        VAL *= REG_SIZE
0x0F        PTR = PTR + VAL                
0x02        CLR VAL                        
0x18        *PTR = VAL                     
                                           
      //syscall     - sys_exit(3c, 0)
0x1F        syscall

